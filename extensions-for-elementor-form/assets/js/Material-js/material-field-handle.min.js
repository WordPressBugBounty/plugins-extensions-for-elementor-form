!function($){const addHandler=$element=>{const forms=$element.find(".cool-form");forms.each((function(formIndex){const textFields=document.querySelectorAll(".cool-form-text");textFields.forEach(field=>{const mdcField=mdc.textfield.MDCTextField.attachTo(field),mainInput=mdcField.input;if("number"===mainInput.type)mainInput.addEventListener("input",(function(e){let inputVal=e.target.value,inputMin=mainInput.min,inputMax=mainInput.max,helperText=mdcField.helperText.foundation.adapter;if(""===inputVal)mdcField.valid=!1,mdcField.trailingIcon.root.style.display="initial",helperText.setContent("Please enter a number value to the field");else{const numVal=Number(inputVal);""!==inputMin&&numVal<Number(inputMin)?(mdcField.valid=!1,mdcField.trailingIcon.root.style.display="initial",helperText.setContent(`Value must be greater than or equal to ${inputMin}`)):""!==inputMax&&numVal>Number(inputMax)?(mdcField.valid=!1,mdcField.trailingIcon.root.style.display="initial",helperText.setContent(`Value must be less than or equal to ${inputMax}`)):(mdcField.valid=!0,mdcField.trailingIcon.root.style.display="none",helperText.setContent(""))}}));else if("tel"==mainInput.type){let helperTextAdapter=mdcField.helperText.foundation.adapter;const validateTel=e=>{const value=e.target.value,pattern="^"+mainInput.pattern+"$",regex=new RegExp(pattern);""!==value?regex.test(value)?(mdcField.valid=!0,helperTextAdapter.setContent("")):(mdcField.valid=!1,mdcField.trailingIcon.root.style.display="initial",helperTextAdapter.setContent("The field accepts only numbers and phone characters (#, -, *, etc).")):mdcField.trailingIcon.root.style.display="none"};mainInput.addEventListener("input",validateTel),mainInput.addEventListener("blur",validateTel)}else if("email"===mainInput.type){let helperTextAdapter=mdcField.helperText.foundation.adapter;const validateEmail=e=>{const value=e.target.value,regex=/^[^\s@]+@[^\s@]+\.[^\s@]+$/;""!==value?regex.test(value)?(mdcField.valid=!0,mdcField.trailingIcon.root.style.display="none",helperTextAdapter.setContent("")):(mdcField.valid=!1,mdcField.trailingIcon.root.style.display="initial",helperTextAdapter.setContent("Please enter a valid email address.")):mdcField.trailingIcon.root.style.display="none"};mainInput.addEventListener("input",validateEmail),mainInput.addEventListener("blur",validateEmail)}}),document.querySelectorAll(".mdc-select").forEach(selectEl=>{const select=new mdc.select.MDCSelect(selectEl);if(-1===select.selectedIndex){select.selectedIndex=0;const hiddenSelect=selectEl.querySelector("select");if(hiddenSelect){hiddenSelect.innerHTML="";const newOption=document.createElement("option");newOption.value=select.value,newOption.textContent=select.selectedText.textContent,hiddenSelect.appendChild(newOption)}}select.listen("MDCSelect:change",(function(){const hiddenSelect=selectEl.querySelector("select");if(hiddenSelect){hiddenSelect.innerHTML="";const newOption=document.createElement("option");newOption.value=select.value,newOption.textContent=select.selectedText.textContent,hiddenSelect.appendChild(newOption)}}))})})),forms.find(".cool-form-submit-button").click(e=>{const $invalidField=forms.find(".mdc-text-field--invalid"),$emptyRequired=forms.find(".is-field-required").filter((function(){const $this=$(this);let textEmpty=!1,selectEmpty=!1,acceptanceEmpty=!1;if($this.find(".mdc-text-field__input").length){textEmpty=""===$this.find(".mdc-text-field__input").first().val().trim();var classes=$this.attr("class").split(/\s+/),fieldTypeValue="";classes.forEach((function(className){var match=className.match(/^is-field-type-(.+)$/);match&&(fieldTypeValue=match[1])})),textEmpty?($this.find(`#cool-${fieldTypeValue}-error`).text("This Field is required").css("color","#bb2a46"),$this.find(`.cool-${fieldTypeValue}-error-icon`).css("display","initial")):($this.find(`#cool-${fieldTypeValue}-error`).text(""),$this.find(`.cool-${fieldTypeValue}-error-icon`).css("display","none"))}if($this.find("select").length){let selectMainWrapper=$this.find(".mdc-select").first();selectEmpty=""===$this.find("select").first().val().trim(),selectEmpty?(selectMainWrapper.addClass("mdc-select--invalid"),$this.find("#cool-select-error").text("This Field is required").css("color","#bb2a46")):(selectMainWrapper.removeClass("mdc-select--invalid"),$this.find("#cool-select-error").text(""))}return $this.find(".mdc-checkbox").length>0&&(acceptanceEmpty=!$this.find(".mdc-checkbox").find("input")[0],acceptanceEmpty?$this.find("#cool-acceptance-error").text("This Field is required").css("color","#bb2a46"):$this.find("#cool-acceptance-error").text("")),textEmpty||selectEmpty||acceptanceEmpty}));if($invalidField.length||$emptyRequired.length){let $target;if(e.preventDefault(),$invalidField.length)$target=$invalidField.first().find(".mdc-text-field__input"),$target.focus();else if($emptyRequired.find("label").hasClass("cool-form-text"))$target=$emptyRequired.find(".mdc-text-field__input").first(),$target.focus();else if($emptyRequired.hasClass("is-field-type-acceptance"))$target=$emptyRequired;else if($emptyRequired.hasClass("is-field-type-select")&&""===$emptyRequired.find("select").val().trim()){let selectMainWrapper;$target=$emptyRequired.find(".mdc-select").first()}return $target&&$target.length&&$("html, body").animate({scrollTop:$target.offset().top-100},100),!1}})};$(window).on("elementor/frontend/init",()=>{elementorFrontend.hooks.addAction("frontend/element_ready/cool-form.default",addHandler)})}(jQuery);